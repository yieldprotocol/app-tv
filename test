import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/dist/src/signer-with-address'

import { Cauldron } from '../typechain/Cauldron'
import { Ladle } from '../typechain/Ladle'
import { FYToken } from '../typechain/FYToken'
import { ERC20Mock } from '../typechain/ERC20Mock'

import { YieldEnvironment, WAD } from '../test/shared/fixtures'

import { ethers, waffle } from 'hardhat'

const { loadFixture } = waffle

const base:Uint8Array = ethers.utils.randomBytes(6);
const ilks:Uint8Array[] = [
    ethers.utils.randomBytes(6),
    ethers.utils.randomBytes(6),
    ethers.utils.randomBytes(6),
]
const series:Uint8Array[] = [
    ethers.utils.randomBytes(6),
    ethers.utils.randomBytes(6),
    ethers.utils.randomBytes(6),
    ethers.utils.randomBytes(6),
    ethers.utils.randomBytes(6),
    ethers.utils.randomBytes(6)
]

const externalTestAccounts = [
    "0xe4Be16e13267466B6241dEA1252bE231dfA8D86c",
]

async function fixture() {
    const [ ownerAcc ] = await ethers.getSigners();
    return await YieldEnvironment.setup(
        ownerAcc, 
        [
            ethers.utils.hexlify(ethers.utils.randomBytes(6)),  //BASE
            ...ilks.map((x:Uint8Array) => ethers.utils.hexlify(x))
        ], 
        [
            // ethers.utils.hexlify(series[0])
            ...series.map((x:Uint8Array) => ethers.utils.hexlify(ethers.utils.randomBytes(6)))
        ]
        )
}

const fundExternalAccounts = async  () => {
    const [ ownerAcc ] = await ethers.getSigners();
    await Promise.all(
        externalTestAccounts.map((to:string)=> {
            ownerAcc.sendTransaction({to,value: ethers.utils.parseEther("100")})
        })
    )
    console.log('External Accounts funded with 100ETH.')
};

loadFixture(fixture).then( ( env:YieldEnvironment)  => { 

    console.log(`"Cauldron": "${env.cauldron.address}",`)
    console.log(`"Ladle" : "${env.ladle.address}",`)
    console.log(`"Witch" : "${env.witch.address}"`)
    
    console.log('Assets:')
    env.assets.forEach((value:any, key:any)=>{ console.log(`"${key}" : "${value.address}",` ) })

    console.log('Oracles:')
    env.oracles.forEach((value:any, key:any)=>{ console.log(`"${key}" : "${value.address}",` ) })
    
    console.log('Series:')
    env.series.forEach((value:any, key:any)=>{ console.log(`"${key}" : "${value.address}",` ) })
    
    console.log('Joins:')
    env.joins.forEach((value:any, key:any)=>{ console.log(`"${key}" : "${value.address}",` ) })

    console.log('Vaults:')
    env.vaults.forEach((value:any, key:any) => console.log(value))

    fundExternalAccounts();

}

);