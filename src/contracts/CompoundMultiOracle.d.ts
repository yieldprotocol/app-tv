/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CompoundMultiOracleInterface extends ethers.utils.Interface {
  functions: {
    "SCALE_FACTOR()": FunctionFragment;
    "get(bytes32,bytes32,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "peek(bytes32,bytes32,uint256)": FunctionFragment;
    "setSources(bytes6[],bytes32[],address[])": FunctionFragment;
    "sources(bytes6,bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SCALE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "peek",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSources",
    values: [BytesLike[], BytesLike[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sources",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "SCALE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peek", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSources", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sources", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SourcesSet(bytes6[],bytes32[],address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SourcesSet"): EventFragment;
}

export class CompoundMultiOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CompoundMultiOracleInterface;

  functions: {
    SCALE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "SCALE_FACTOR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    get(
      base: BytesLike,
      kind: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
    >;

    "get(bytes32,bytes32,uint256)"(
      base: BytesLike,
      kind: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    peek(
      base: BytesLike,
      kind: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
    >;

    "peek(bytes32,bytes32,uint256)"(
      base: BytesLike,
      kind: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
    >;

    setSources(
      bases: BytesLike[],
      kinds: BytesLike[],
      sources_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSources(bytes6[],bytes32[],address[])"(
      bases: BytesLike[],
      kinds: BytesLike[],
      sources_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sources(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "sources(bytes6,bytes32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  SCALE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  "SCALE_FACTOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  get(
    base: BytesLike,
    kind: BytesLike,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
  >;

  "get(bytes32,bytes32,uint256)"(
    base: BytesLike,
    kind: BytesLike,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  peek(
    base: BytesLike,
    kind: BytesLike,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
  >;

  "peek(bytes32,bytes32,uint256)"(
    base: BytesLike,
    kind: BytesLike,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
  >;

  setSources(
    bases: BytesLike[],
    kinds: BytesLike[],
    sources_: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSources(bytes6[],bytes32[],address[])"(
    bases: BytesLike[],
    kinds: BytesLike[],
    sources_: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sources(
    arg0: BytesLike,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "sources(bytes6,bytes32)"(
    arg0: BytesLike,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SCALE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    "SCALE_FACTOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    get(
      base: BytesLike,
      kind: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
    >;

    "get(bytes32,bytes32,uint256)"(
      base: BytesLike,
      kind: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    peek(
      base: BytesLike,
      kind: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
    >;

    "peek(bytes32,bytes32,uint256)"(
      base: BytesLike,
      kind: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
    >;

    setSources(
      bases: BytesLike[],
      kinds: BytesLike[],
      sources_: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setSources(bytes6[],bytes32[],address[])"(
      bases: BytesLike[],
      kinds: BytesLike[],
      sources_: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    sources(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "sources(bytes6,bytes32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      oldOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    SourcesSet(
      bases: BytesLike[] | null,
      kinds: BytesLike[] | null,
      sources_: string[] | null
    ): TypedEventFilter<
      [string[], string[], string[]],
      { bases: string[]; kinds: string[]; sources_: string[] }
    >;
  };

  estimateGas: {
    SCALE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    "SCALE_FACTOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    get(
      base: BytesLike,
      kind: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get(bytes32,bytes32,uint256)"(
      base: BytesLike,
      kind: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    peek(
      base: BytesLike,
      kind: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peek(bytes32,bytes32,uint256)"(
      base: BytesLike,
      kind: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSources(
      bases: BytesLike[],
      kinds: BytesLike[],
      sources_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSources(bytes6[],bytes32[],address[])"(
      bases: BytesLike[],
      kinds: BytesLike[],
      sources_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sources(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sources(bytes6,bytes32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SCALE_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SCALE_FACTOR()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get(
      base: BytesLike,
      kind: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get(bytes32,bytes32,uint256)"(
      base: BytesLike,
      kind: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peek(
      base: BytesLike,
      kind: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "peek(bytes32,bytes32,uint256)"(
      base: BytesLike,
      kind: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setSources(
      bases: BytesLike[],
      kinds: BytesLike[],
      sources_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSources(bytes6[],bytes32[],address[])"(
      bases: BytesLike[],
      kinds: BytesLike[],
      sources_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sources(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sources(bytes6,bytes32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
