/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IPoolInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseToken()": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "buyBaseToken(address,uint128,uint128)": FunctionFragment;
    "buyBaseTokenPreview(uint128)": FunctionFragment;
    "buyFYToken(address,uint128,uint128)": FunctionFragment;
    "buyFYTokenPreview(uint128)": FunctionFragment;
    "fyToken()": FunctionFragment;
    "getBaseTokenReserves()": FunctionFragment;
    "getFYTokenReserves()": FunctionFragment;
    "maturity()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "sellBaseToken(address,uint128)": FunctionFragment;
    "sellBaseTokenPreview(uint128)": FunctionFragment;
    "sellFYToken(address,uint128)": FunctionFragment;
    "sellFYTokenPreview(uint128)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBaseToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBaseTokenPreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFYToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFYTokenPreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fyToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBaseTokenReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFYTokenReserves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maturity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellBaseToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellBaseTokenPreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellFYToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellFYTokenPreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBaseTokenPreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyFYToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyFYTokenPreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokenReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFYTokenReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maturity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellBaseTokenPreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellFYToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellFYTokenPreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class IPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPoolInterface;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    "baseToken()"(overrides?: CallOverrides): Promise<[string]>;

    burn(
      to: string,
      tokensBurned: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(address,uint256)"(
      to: string,
      tokensBurned: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    buyBaseToken(
      to: string,
      baseTokenOut: BigNumberish,
      maxFYTokenIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buyBaseToken(address,uint128,uint128)"(
      to: string,
      baseTokenOut: BigNumberish,
      maxFYTokenIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    buyBaseTokenPreview(
      baseTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "buyBaseTokenPreview(uint128)"(
      baseTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      maxBaseTokenIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buyFYToken(address,uint128,uint128)"(
      to: string,
      fyTokenOut: BigNumberish,
      maxBaseTokenIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    buyFYTokenPreview(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "buyFYTokenPreview(uint128)"(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fyToken(overrides?: CallOverrides): Promise<[string]>;

    "fyToken()"(overrides?: CallOverrides): Promise<[string]>;

    getBaseTokenReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getBaseTokenReserves()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFYTokenReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getFYTokenReserves()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maturity(overrides?: CallOverrides): Promise<[number]>;

    "maturity()"(overrides?: CallOverrides): Promise<[number]>;

    mint(
      to: string,
      tokenOffered: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      to: string,
      tokenOffered: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sellBaseToken(
      to: string,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sellBaseToken(address,uint128)"(
      to: string,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sellBaseTokenPreview(
      baseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "sellBaseTokenPreview(uint128)"(
      baseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sellFYToken(
      to: string,
      minBaseTokenOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sellFYToken(address,uint128)"(
      to: string,
      minBaseTokenOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sellFYTokenPreview(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "sellFYTokenPreview(uint128)"(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  "baseToken()"(overrides?: CallOverrides): Promise<string>;

  burn(
    to: string,
    tokensBurned: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(address,uint256)"(
    to: string,
    tokensBurned: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  buyBaseToken(
    to: string,
    baseTokenOut: BigNumberish,
    maxFYTokenIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buyBaseToken(address,uint128,uint128)"(
    to: string,
    baseTokenOut: BigNumberish,
    maxFYTokenIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  buyBaseTokenPreview(
    baseTokenOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "buyBaseTokenPreview(uint128)"(
    baseTokenOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyFYToken(
    to: string,
    fyTokenOut: BigNumberish,
    maxBaseTokenIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buyFYToken(address,uint128,uint128)"(
    to: string,
    fyTokenOut: BigNumberish,
    maxBaseTokenIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  buyFYTokenPreview(
    fyTokenOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "buyFYTokenPreview(uint128)"(
    fyTokenOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fyToken(overrides?: CallOverrides): Promise<string>;

  "fyToken()"(overrides?: CallOverrides): Promise<string>;

  getBaseTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

  "getBaseTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

  getFYTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

  "getFYTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

  maturity(overrides?: CallOverrides): Promise<number>;

  "maturity()"(overrides?: CallOverrides): Promise<number>;

  mint(
    to: string,
    tokenOffered: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    to: string,
    tokenOffered: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sellBaseToken(
    to: string,
    minFYTokenOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sellBaseToken(address,uint128)"(
    to: string,
    minFYTokenOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sellBaseTokenPreview(
    baseTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "sellBaseTokenPreview(uint128)"(
    baseTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sellFYToken(
    to: string,
    minBaseTokenOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sellFYToken(address,uint128)"(
    to: string,
    minBaseTokenOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sellFYTokenPreview(
    fyTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "sellFYTokenPreview(uint128)"(
    fyTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    "baseToken()"(overrides?: CallOverrides): Promise<string>;

    burn(
      to: string,
      tokensBurned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "burn(address,uint256)"(
      to: string,
      tokensBurned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    buyBaseToken(
      to: string,
      baseTokenOut: BigNumberish,
      maxFYTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyBaseToken(address,uint128,uint128)"(
      to: string,
      baseTokenOut: BigNumberish,
      maxFYTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyBaseTokenPreview(
      baseTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyBaseTokenPreview(uint128)"(
      baseTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      maxBaseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyFYToken(address,uint128,uint128)"(
      to: string,
      fyTokenOut: BigNumberish,
      maxBaseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFYTokenPreview(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyFYTokenPreview(uint128)"(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fyToken(overrides?: CallOverrides): Promise<string>;

    "fyToken()"(overrides?: CallOverrides): Promise<string>;

    getBaseTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFYTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getFYTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<number>;

    "maturity()"(overrides?: CallOverrides): Promise<number>;

    mint(
      to: string,
      tokenOffered: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      to: string,
      tokenOffered: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sellBaseToken(
      to: string,
      minFYTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellBaseToken(address,uint128)"(
      to: string,
      minFYTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellBaseTokenPreview(
      baseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellBaseTokenPreview(uint128)"(
      baseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellFYToken(
      to: string,
      minBaseTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellFYToken(address,uint128)"(
      to: string,
      minBaseTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellFYTokenPreview(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellFYTokenPreview(uint128)"(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    "baseToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      to: string,
      tokensBurned: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burn(address,uint256)"(
      to: string,
      tokensBurned: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    buyBaseToken(
      to: string,
      baseTokenOut: BigNumberish,
      maxFYTokenIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "buyBaseToken(address,uint128,uint128)"(
      to: string,
      baseTokenOut: BigNumberish,
      maxFYTokenIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    buyBaseTokenPreview(
      baseTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyBaseTokenPreview(uint128)"(
      baseTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      maxBaseTokenIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "buyFYToken(address,uint128,uint128)"(
      to: string,
      fyTokenOut: BigNumberish,
      maxBaseTokenIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    buyFYTokenPreview(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyFYTokenPreview(uint128)"(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fyToken(overrides?: CallOverrides): Promise<BigNumber>;

    "fyToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFYTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getFYTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<BigNumber>;

    "maturity()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      tokenOffered: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      to: string,
      tokenOffered: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sellBaseToken(
      to: string,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sellBaseToken(address,uint128)"(
      to: string,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sellBaseTokenPreview(
      baseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellBaseTokenPreview(uint128)"(
      baseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellFYToken(
      to: string,
      minBaseTokenOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sellFYToken(address,uint128)"(
      to: string,
      minBaseTokenOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sellFYTokenPreview(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellFYTokenPreview(uint128)"(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      to: string,
      tokensBurned: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(address,uint256)"(
      to: string,
      tokensBurned: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    buyBaseToken(
      to: string,
      baseTokenOut: BigNumberish,
      maxFYTokenIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buyBaseToken(address,uint128,uint128)"(
      to: string,
      baseTokenOut: BigNumberish,
      maxFYTokenIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    buyBaseTokenPreview(
      baseTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "buyBaseTokenPreview(uint128)"(
      baseTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      maxBaseTokenIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buyFYToken(address,uint128,uint128)"(
      to: string,
      fyTokenOut: BigNumberish,
      maxBaseTokenIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    buyFYTokenPreview(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "buyFYTokenPreview(uint128)"(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fyToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBaseTokenReserves(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBaseTokenReserves()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFYTokenReserves(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFYTokenReserves()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maturity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maturity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to: string,
      tokenOffered: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      to: string,
      tokenOffered: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sellBaseToken(
      to: string,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sellBaseToken(address,uint128)"(
      to: string,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sellBaseTokenPreview(
      baseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sellBaseTokenPreview(uint128)"(
      baseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellFYToken(
      to: string,
      minBaseTokenOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sellFYToken(address,uint128)"(
      to: string,
      minBaseTokenOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sellFYTokenPreview(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sellFYTokenPreview(uint128)"(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
