/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WitchInterface extends ethers.utils.Interface {
  functions: {
    "AUCTION_TIME()": FunctionFragment;
    "buy(bytes12,uint128,uint128)": FunctionFragment;
    "cauldron()": FunctionFragment;
    "grab(bytes12)": FunctionFragment;
    "ladle()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AUCTION_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cauldron", values?: undefined): string;
  encodeFunctionData(functionFragment: "grab", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "ladle", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "AUCTION_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cauldron", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grab", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ladle", data: BytesLike): Result;

  events: {
    "Bought(address,bytes12,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bought"): EventFragment;
}

export class Witch extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WitchInterface;

  functions: {
    AUCTION_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    "AUCTION_TIME()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    buy(
      vaultId: BytesLike,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buy(bytes12,uint128,uint128)"(
      vaultId: BytesLike,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cauldron(overrides?: CallOverrides): Promise<[string]>;

    "cauldron()"(overrides?: CallOverrides): Promise<[string]>;

    grab(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "grab(bytes12)"(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ladle(overrides?: CallOverrides): Promise<[string]>;

    "ladle()"(overrides?: CallOverrides): Promise<[string]>;
  };

  AUCTION_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  "AUCTION_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

  buy(
    vaultId: BytesLike,
    art: BigNumberish,
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buy(bytes12,uint128,uint128)"(
    vaultId: BytesLike,
    art: BigNumberish,
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cauldron(overrides?: CallOverrides): Promise<string>;

  "cauldron()"(overrides?: CallOverrides): Promise<string>;

  grab(
    vaultId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "grab(bytes12)"(
    vaultId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ladle(overrides?: CallOverrides): Promise<string>;

  "ladle()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    AUCTION_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "AUCTION_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      vaultId: BytesLike,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buy(bytes12,uint128,uint128)"(
      vaultId: BytesLike,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cauldron(overrides?: CallOverrides): Promise<string>;

    "cauldron()"(overrides?: CallOverrides): Promise<string>;

    grab(vaultId: BytesLike, overrides?: CallOverrides): Promise<void>;

    "grab(bytes12)"(
      vaultId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    ladle(overrides?: CallOverrides): Promise<string>;

    "ladle()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Bought(
      buyer: string | null,
      vaultId: BytesLike | null,
      ink: null,
      art: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { buyer: string; vaultId: string; ink: BigNumber; art: BigNumber }
    >;
  };

  estimateGas: {
    AUCTION_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "AUCTION_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      vaultId: BytesLike,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buy(bytes12,uint128,uint128)"(
      vaultId: BytesLike,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<BigNumber>;

    "cauldron()"(overrides?: CallOverrides): Promise<BigNumber>;

    grab(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "grab(bytes12)"(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ladle(overrides?: CallOverrides): Promise<BigNumber>;

    "ladle()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AUCTION_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "AUCTION_TIME()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      vaultId: BytesLike,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buy(bytes12,uint128,uint128)"(
      vaultId: BytesLike,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cauldron(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cauldron()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grab(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "grab(bytes12)"(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ladle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ladle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
