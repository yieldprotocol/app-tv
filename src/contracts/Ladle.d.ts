/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LadleInterface extends ethers.utils.Interface {
  functions: {
    "LOCK()": FunctionFragment;
    "ROOT()": FunctionFragment;
    "_join(bytes12,address,int128,int128)": FunctionFragment;
    "addJoin(bytes6,address)": FunctionFragment;
    "addPool(bytes6,address)": FunctionFragment;
    "batch(bytes[],bool)": FunctionFragment;
    "build(bytes12,bytes6,bytes6)": FunctionFragment;
    "cauldron()": FunctionFragment;
    "close(bytes12,address,int128,int128)": FunctionFragment;
    "destroy(bytes12)": FunctionFragment;
    "getRoleAdmin(bytes4)": FunctionFragment;
    "give(bytes12,address)": FunctionFragment;
    "grantRole(bytes4,address)": FunctionFragment;
    "grantRoles(bytes4[],address)": FunctionFragment;
    "hasRole(bytes4,address)": FunctionFragment;
    "joins(bytes6)": FunctionFragment;
    "lockRole(bytes4)": FunctionFragment;
    "pools(bytes6)": FunctionFragment;
    "pour(bytes12,address,int128,int128)": FunctionFragment;
    "renounceRole(bytes4,address)": FunctionFragment;
    "revokeRole(bytes4,address)": FunctionFragment;
    "roll(bytes12,bytes6,int128)": FunctionFragment;
    "serve(bytes12,address,int128,int128,uint128)": FunctionFragment;
    "setRoleAdmin(bytes4,bytes4)": FunctionFragment;
    "stir(bytes12,bytes12,uint128)": FunctionFragment;
    "tweak(bytes12,bytes6,bytes6)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "LOCK", values?: undefined): string;
  encodeFunctionData(functionFragment: "ROOT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_join",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addJoin",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batch",
    values: [BytesLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "build",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "cauldron", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "close",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "destroy", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "give",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoles",
    values: [BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "joins", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "lockRole", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "pools", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "pour",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "roll",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "serve",
    values: [BytesLike, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleAdmin",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stir",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tweak",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "LOCK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ROOT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "build", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cauldron", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "give", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pour", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "serve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stir", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tweak", data: BytesLike): Result;

  events: {
    "JoinAdded(bytes6,address)": EventFragment;
    "PoolAdded(bytes6,address)": EventFragment;
    "RoleAdminChanged(bytes4,bytes4)": EventFragment;
    "RoleGranted(bytes4,address,address)": EventFragment;
    "RoleRevoked(bytes4,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "JoinAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class Ladle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LadleInterface;

  functions: {
    LOCK(overrides?: CallOverrides): Promise<[string]>;

    "LOCK()"(overrides?: CallOverrides): Promise<[string]>;

    ROOT(overrides?: CallOverrides): Promise<[string]>;

    "ROOT()"(overrides?: CallOverrides): Promise<[string]>;

    _join(
      vaultId: BytesLike,
      user: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_join(bytes12,address,int128,int128)"(
      vaultId: BytesLike,
      user: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addJoin(
      assetId: BytesLike,
      join: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addJoin(bytes6,address)"(
      assetId: BytesLike,
      join: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addPool(
      seriesId: BytesLike,
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPool(bytes6,address)"(
      seriesId: BytesLike,
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "batch(bytes[],bool)"(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    build(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "build(bytes12,bytes6,bytes6)"(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cauldron(overrides?: CallOverrides): Promise<[string]>;

    "cauldron()"(overrides?: CallOverrides): Promise<[string]>;

    close(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "close(bytes12,address,int128,int128)"(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    destroy(
      vaultId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "destroy(bytes12)"(
      vaultId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    give(
      vaultId: BytesLike,
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "give(bytes12,address)"(
      vaultId: BytesLike,
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "joins(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lockRole(bytes4)"(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pools(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "pools(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pour(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pour(bytes12,address,int128,int128)"(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    roll(
      vaultId: BytesLike,
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "roll(bytes12,bytes6,int128)"(
      vaultId: BytesLike,
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    serve(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "serve(bytes12,address,int128,int128,uint128)"(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRoleAdmin(bytes4,bytes4)"(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stir(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stir(bytes12,bytes12,uint128)"(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tweak(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tweak(bytes12,bytes6,bytes6)"(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  LOCK(overrides?: CallOverrides): Promise<string>;

  "LOCK()"(overrides?: CallOverrides): Promise<string>;

  ROOT(overrides?: CallOverrides): Promise<string>;

  "ROOT()"(overrides?: CallOverrides): Promise<string>;

  _join(
    vaultId: BytesLike,
    user: string,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_join(bytes12,address,int128,int128)"(
    vaultId: BytesLike,
    user: string,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addJoin(
    assetId: BytesLike,
    join: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addJoin(bytes6,address)"(
    assetId: BytesLike,
    join: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addPool(
    seriesId: BytesLike,
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPool(bytes6,address)"(
    seriesId: BytesLike,
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  batch(
    calls: BytesLike[],
    revertOnFail: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "batch(bytes[],bool)"(
    calls: BytesLike[],
    revertOnFail: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  build(
    vaultId: BytesLike,
    seriesId: BytesLike,
    ilkId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "build(bytes12,bytes6,bytes6)"(
    vaultId: BytesLike,
    seriesId: BytesLike,
    ilkId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cauldron(overrides?: CallOverrides): Promise<string>;

  "cauldron()"(overrides?: CallOverrides): Promise<string>;

  close(
    vaultId: BytesLike,
    to: string,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "close(bytes12,address,int128,int128)"(
    vaultId: BytesLike,
    to: string,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  destroy(
    vaultId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "destroy(bytes12)"(
    vaultId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes4)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  give(
    vaultId: BytesLike,
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "give(bytes12,address)"(
    vaultId: BytesLike,
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes4,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  grantRoles(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRoles(bytes4[],address)"(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes4,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joins(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "joins(bytes6)"(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  lockRole(
    role: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lockRole(bytes4)"(
    role: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pools(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "pools(bytes6)"(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  pour(
    vaultId: BytesLike,
    to: string,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pour(bytes12,address,int128,int128)"(
    vaultId: BytesLike,
    to: string,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes4,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes4,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  roll(
    vaultId: BytesLike,
    seriesId: BytesLike,
    art: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "roll(bytes12,bytes6,int128)"(
    vaultId: BytesLike,
    seriesId: BytesLike,
    art: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  serve(
    vaultId: BytesLike,
    to: string,
    ink: BigNumberish,
    art: BigNumberish,
    min: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "serve(bytes12,address,int128,int128,uint128)"(
    vaultId: BytesLike,
    to: string,
    ink: BigNumberish,
    art: BigNumberish,
    min: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRoleAdmin(
    role: BytesLike,
    adminRole: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRoleAdmin(bytes4,bytes4)"(
    role: BytesLike,
    adminRole: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stir(
    from: BytesLike,
    to: BytesLike,
    ink: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stir(bytes12,bytes12,uint128)"(
    from: BytesLike,
    to: BytesLike,
    ink: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tweak(
    vaultId: BytesLike,
    seriesId: BytesLike,
    ilkId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tweak(bytes12,bytes6,bytes6)"(
    vaultId: BytesLike,
    seriesId: BytesLike,
    ilkId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    LOCK(overrides?: CallOverrides): Promise<string>;

    "LOCK()"(overrides?: CallOverrides): Promise<string>;

    ROOT(overrides?: CallOverrides): Promise<string>;

    "ROOT()"(overrides?: CallOverrides): Promise<string>;

    _join(
      vaultId: BytesLike,
      user: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "_join(bytes12,address,int128,int128)"(
      vaultId: BytesLike,
      user: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addJoin(
      assetId: BytesLike,
      join: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addJoin(bytes6,address)"(
      assetId: BytesLike,
      join: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPool(
      seriesId: BytesLike,
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPool(bytes6,address)"(
      seriesId: BytesLike,
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: CallOverrides
    ): Promise<
      [boolean[], string[]] & { successes: boolean[]; results: string[] }
    >;

    "batch(bytes[],bool)"(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: CallOverrides
    ): Promise<
      [boolean[], string[]] & { successes: boolean[]; results: string[] }
    >;

    build(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "build(bytes12,bytes6,bytes6)"(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cauldron(overrides?: CallOverrides): Promise<string>;

    "cauldron()"(overrides?: CallOverrides): Promise<string>;

    close(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }>;

    "close(bytes12,address,int128,int128)"(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }>;

    destroy(vaultId: BytesLike, overrides?: CallOverrides): Promise<void>;

    "destroy(bytes12)"(
      vaultId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    give(
      vaultId: BytesLike,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "give(bytes12,address)"(
      vaultId: BytesLike,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "joins(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    lockRole(role: BytesLike, overrides?: CallOverrides): Promise<void>;

    "lockRole(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    pools(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "pools(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    pour(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }>;

    "pour(bytes12,address,int128,int128)"(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    roll(
      vaultId: BytesLike,
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "roll(bytes12,bytes6,int128)"(
      vaultId: BytesLike,
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    serve(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber },
        BigNumber
      ] & {
        balances_: [BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber };
        base_: BigNumber;
      }
    >;

    "serve(bytes12,address,int128,int128,uint128)"(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber },
        BigNumber
      ] & {
        balances_: [BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber };
        base_: BigNumber;
      }
    >;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRoleAdmin(bytes4,bytes4)"(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    stir(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber },
        [BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }
      ]
    >;

    "stir(bytes12,bytes12,uint128)"(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber },
        [BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }
      ]
    >;

    tweak(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "tweak(bytes12,bytes6,bytes6)"(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    JoinAdded(
      assetId: BytesLike | null,
      join: string | null
    ): TypedEventFilter<[string, string], { assetId: string; join: string }>;

    PoolAdded(
      seriesId: BytesLike | null,
      pool: string | null
    ): TypedEventFilter<[string, string], { seriesId: string; pool: string }>;

    RoleAdminChanged(
      role: BytesLike | null,
      newAdminRole: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { role: string; newAdminRole: string }
    >;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "LOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT(overrides?: CallOverrides): Promise<BigNumber>;

    "ROOT()"(overrides?: CallOverrides): Promise<BigNumber>;

    _join(
      vaultId: BytesLike,
      user: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_join(bytes12,address,int128,int128)"(
      vaultId: BytesLike,
      user: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addJoin(
      assetId: BytesLike,
      join: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addJoin(bytes6,address)"(
      assetId: BytesLike,
      join: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addPool(
      seriesId: BytesLike,
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPool(bytes6,address)"(
      seriesId: BytesLike,
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "batch(bytes[],bool)"(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    build(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "build(bytes12,bytes6,bytes6)"(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<BigNumber>;

    "cauldron()"(overrides?: CallOverrides): Promise<BigNumber>;

    close(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "close(bytes12,address,int128,int128)"(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    destroy(vaultId: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "destroy(bytes12)"(
      vaultId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    give(
      vaultId: BytesLike,
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "give(bytes12,address)"(
      vaultId: BytesLike,
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "joins(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockRole(role: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "lockRole(bytes4)"(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pools(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "pools(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pour(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "pour(bytes12,address,int128,int128)"(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    roll(
      vaultId: BytesLike,
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "roll(bytes12,bytes6,int128)"(
      vaultId: BytesLike,
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    serve(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "serve(bytes12,address,int128,int128,uint128)"(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRoleAdmin(bytes4,bytes4)"(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stir(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stir(bytes12,bytes12,uint128)"(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tweak(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tweak(bytes12,bytes6,bytes6)"(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LOCK()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROOT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _join(
      vaultId: BytesLike,
      user: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_join(bytes12,address,int128,int128)"(
      vaultId: BytesLike,
      user: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addJoin(
      assetId: BytesLike,
      join: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addJoin(bytes6,address)"(
      assetId: BytesLike,
      join: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addPool(
      seriesId: BytesLike,
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPool(bytes6,address)"(
      seriesId: BytesLike,
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "batch(bytes[],bool)"(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    build(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "build(bytes12,bytes6,bytes6)"(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cauldron(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cauldron()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    close(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "close(bytes12,address,int128,int128)"(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    destroy(
      vaultId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "destroy(bytes12)"(
      vaultId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    give(
      vaultId: BytesLike,
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "give(bytes12,address)"(
      vaultId: BytesLike,
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joins(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "joins(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lockRole(bytes4)"(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pools(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pour(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pour(bytes12,address,int128,int128)"(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    roll(
      vaultId: BytesLike,
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "roll(bytes12,bytes6,int128)"(
      vaultId: BytesLike,
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    serve(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "serve(bytes12,address,int128,int128,uint128)"(
      vaultId: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRoleAdmin(bytes4,bytes4)"(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stir(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stir(bytes12,bytes12,uint128)"(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tweak(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tweak(bytes12,bytes6,bytes6)"(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
