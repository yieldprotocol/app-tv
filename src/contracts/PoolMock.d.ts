/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PoolMockInterface extends ethers.utils.Interface {
  functions: {
    "baseToken()": FunctionFragment;
    "baseTokenReserves()": FunctionFragment;
    "buyBaseToken(address,uint128)": FunctionFragment;
    "buyFYToken(address,uint128)": FunctionFragment;
    "fyToken()": FunctionFragment;
    "fyTokenReserves()": FunctionFragment;
    "getBaseTokenReserves()": FunctionFragment;
    "getFYTokenReserves()": FunctionFragment;
    "rate()": FunctionFragment;
    "sellBaseToken(address)": FunctionFragment;
    "sellFYToken(address)": FunctionFragment;
    "update()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseTokenReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBaseToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFYToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fyToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fyTokenReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseTokenReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFYTokenReserves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellBaseToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "sellFYToken", values: [string]): string;
  encodeFunctionData(functionFragment: "update", values?: undefined): string;

  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyFYToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fyTokenReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokenReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFYTokenReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellFYToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {};
}

export class PoolMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolMockInterface;

  functions: {
    baseToken(overrides?: CallOverrides): Promise<[string]>;

    "baseToken()"(overrides?: CallOverrides): Promise<[string]>;

    baseTokenReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    "baseTokenReserves()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyBaseToken(
      to: string,
      tokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buyBaseToken(address,uint128)"(
      to: string,
      tokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buyFYToken(address,uint128)"(
      to: string,
      fyTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fyToken(overrides?: CallOverrides): Promise<[string]>;

    "fyToken()"(overrides?: CallOverrides): Promise<[string]>;

    fyTokenReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fyTokenReserves()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBaseTokenReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getBaseTokenReserves()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFYTokenReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getFYTokenReserves()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellBaseToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sellBaseToken(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellFYToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sellFYToken(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "update()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  baseToken(overrides?: CallOverrides): Promise<string>;

  "baseToken()"(overrides?: CallOverrides): Promise<string>;

  baseTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

  "baseTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

  buyBaseToken(
    to: string,
    tokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buyBaseToken(address,uint128)"(
    to: string,
    tokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyFYToken(
    to: string,
    fyTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buyFYToken(address,uint128)"(
    to: string,
    fyTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fyToken(overrides?: CallOverrides): Promise<string>;

  "fyToken()"(overrides?: CallOverrides): Promise<string>;

  fyTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

  "fyTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

  getBaseTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

  "getBaseTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

  getFYTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

  "getFYTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  "rate()"(overrides?: CallOverrides): Promise<BigNumber>;

  sellBaseToken(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sellBaseToken(address)"(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellFYToken(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sellFYToken(address)"(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "update()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    baseToken(overrides?: CallOverrides): Promise<string>;

    "baseToken()"(overrides?: CallOverrides): Promise<string>;

    baseTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "baseTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyBaseToken(
      to: string,
      tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyBaseToken(address,uint128)"(
      to: string,
      tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyFYToken(address,uint128)"(
      to: string,
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fyToken(overrides?: CallOverrides): Promise<string>;

    "fyToken()"(overrides?: CallOverrides): Promise<string>;

    fyTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "fyTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFYTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getFYTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    "rate()"(overrides?: CallOverrides): Promise<BigNumber>;

    sellBaseToken(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    "sellBaseToken(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellFYToken(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    "sellFYToken(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    update(overrides?: CallOverrides): Promise<void>;

    "update()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    "baseToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "baseTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyBaseToken(
      to: string,
      tokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buyBaseToken(address,uint128)"(
      to: string,
      tokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buyFYToken(address,uint128)"(
      to: string,
      fyTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fyToken(overrides?: CallOverrides): Promise<BigNumber>;

    "fyToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    fyTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "fyTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFYTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getFYTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    "rate()"(overrides?: CallOverrides): Promise<BigNumber>;

    sellBaseToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sellBaseToken(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellFYToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sellFYToken(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "update()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseTokenReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseTokenReserves()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyBaseToken(
      to: string,
      tokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buyBaseToken(address,uint128)"(
      to: string,
      tokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buyFYToken(address,uint128)"(
      to: string,
      fyTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fyToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fyTokenReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fyTokenReserves()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseTokenReserves(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBaseTokenReserves()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFYTokenReserves(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFYTokenReserves()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellBaseToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sellBaseToken(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellFYToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sellFYToken(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "update()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
