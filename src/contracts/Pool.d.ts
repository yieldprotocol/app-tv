/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PoolInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseToken()": FunctionFragment;
    "burn(address,uint256,uint256)": FunctionFragment;
    "burnForBaseToken(address,uint256,uint256)": FunctionFragment;
    "buyBaseToken(address,uint128,uint128)": FunctionFragment;
    "buyBaseTokenPreview(uint128)": FunctionFragment;
    "buyFYToken(address,uint128,uint128)": FunctionFragment;
    "buyFYTokenPreview(uint128)": FunctionFragment;
    "cumulativeReserveRatio()": FunctionFragment;
    "decimals()": FunctionFragment;
    "fyToken()": FunctionFragment;
    "getBaseTokenReserves()": FunctionFragment;
    "getFYTokenReserves()": FunctionFragment;
    "getG1()": FunctionFragment;
    "getG2()": FunctionFragment;
    "getK()": FunctionFragment;
    "getStoredReserves()": FunctionFragment;
    "maturity()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "mintWithBaseToken(address,uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "retrieveBaseToken(address)": FunctionFragment;
    "retrieveFYToken(address)": FunctionFragment;
    "sellBaseToken(address,uint128)": FunctionFragment;
    "sellBaseTokenPreview(uint128)": FunctionFragment;
    "sellFYToken(address,uint128)": FunctionFragment;
    "sellFYTokenPreview(uint128)": FunctionFragment;
    "setParameter(bytes32,int128)": FunctionFragment;
    "symbol()": FunctionFragment;
    "sync()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnForBaseToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBaseToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBaseTokenPreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFYToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFYTokenPreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeReserveRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "fyToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBaseTokenReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFYTokenReserves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getG1", values?: undefined): string;
  encodeFunctionData(functionFragment: "getG2", values?: undefined): string;
  encodeFunctionData(functionFragment: "getK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStoredReserves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maturity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithBaseToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveBaseToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveFYToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sellBaseToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellBaseTokenPreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellFYToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellFYTokenPreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setParameter",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnForBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBaseTokenPreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyFYToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyFYTokenPreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeReserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokenReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFYTokenReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getG1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getG2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStoredReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maturity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retrieveBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveFYToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellBaseTokenPreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellFYToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellFYTokenPreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Liquidity(uint32,address,address,int256,int256,int256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ParameterSet(bytes32,int128)": EventFragment;
    "Sync(uint112,uint112,uint256)": EventFragment;
    "Trade(uint32,address,address,int256,int256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sync"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class Pool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(guy: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      guy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    "baseToken()"(overrides?: CallOverrides): Promise<[string]>;

    burn(
      to: string,
      minBaseTokenOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burn(address,uint256,uint256)"(
      to: string,
      minBaseTokenOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnForBaseToken(
      to: string,
      minBaseTokenOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burnForBaseToken(address,uint256,uint256)"(
      to: string,
      minBaseTokenOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyBaseToken(
      to: string,
      tokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buyBaseToken(address,uint128,uint128)"(
      to: string,
      tokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyBaseTokenPreview(
      tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "buyBaseTokenPreview(uint128)"(
      tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buyFYToken(address,uint128,uint128)"(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyFYTokenPreview(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "buyFYTokenPreview(uint128)"(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cumulativeReserveRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    "cumulativeReserveRatio()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "decimals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    fyToken(overrides?: CallOverrides): Promise<[string]>;

    "fyToken()"(overrides?: CallOverrides): Promise<[string]>;

    getBaseTokenReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getBaseTokenReserves()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFYTokenReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getFYTokenReserves()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getG1(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getG1()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getG2(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getG2()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getK(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getK()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStoredReserves(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>;

    "getStoredReserves()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>;

    maturity(overrides?: CallOverrides): Promise<[number]>;

    "maturity()"(overrides?: CallOverrides): Promise<[number]>;

    mint(
      to: string,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      to: string,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintWithBaseToken(
      to: string,
      fyTokenToBuy: BigNumberish,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintWithBaseToken(address,uint256,uint256)"(
      to: string,
      fyTokenToBuy: BigNumberish,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveBaseToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "retrieveBaseToken(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveFYToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "retrieveFYToken(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellBaseToken(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sellBaseToken(address,uint128)"(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellBaseTokenPreview(
      baseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "sellBaseTokenPreview(uint128)"(
      baseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sellFYToken(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sellFYToken(address,uint128)"(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellFYTokenPreview(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "sellFYTokenPreview(uint128)"(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setParameter(
      parameter: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setParameter(bytes32,int128)"(
      parameter: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    "version()"(overrides?: CallOverrides): Promise<[string]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(guy: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    guy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  "baseToken()"(overrides?: CallOverrides): Promise<string>;

  burn(
    to: string,
    minBaseTokenOut: BigNumberish,
    minFYTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burn(address,uint256,uint256)"(
    to: string,
    minBaseTokenOut: BigNumberish,
    minFYTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnForBaseToken(
    to: string,
    minBaseTokenOut: BigNumberish,
    minFYTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burnForBaseToken(address,uint256,uint256)"(
    to: string,
    minBaseTokenOut: BigNumberish,
    minFYTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyBaseToken(
    to: string,
    tokenOut: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buyBaseToken(address,uint128,uint128)"(
    to: string,
    tokenOut: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyBaseTokenPreview(
    tokenOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "buyBaseTokenPreview(uint128)"(
    tokenOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyFYToken(
    to: string,
    fyTokenOut: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buyFYToken(address,uint128,uint128)"(
    to: string,
    fyTokenOut: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyFYTokenPreview(
    fyTokenOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "buyFYTokenPreview(uint128)"(
    fyTokenOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cumulativeReserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "cumulativeReserveRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  fyToken(overrides?: CallOverrides): Promise<string>;

  "fyToken()"(overrides?: CallOverrides): Promise<string>;

  getBaseTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

  "getBaseTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

  getFYTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

  "getFYTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

  getG1(overrides?: CallOverrides): Promise<BigNumber>;

  "getG1()"(overrides?: CallOverrides): Promise<BigNumber>;

  getG2(overrides?: CallOverrides): Promise<BigNumber>;

  "getG2()"(overrides?: CallOverrides): Promise<BigNumber>;

  getK(overrides?: CallOverrides): Promise<BigNumber>;

  "getK()"(overrides?: CallOverrides): Promise<BigNumber>;

  getStoredReserves(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, number]>;

  "getStoredReserves()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, number]>;

  maturity(overrides?: CallOverrides): Promise<number>;

  "maturity()"(overrides?: CallOverrides): Promise<number>;

  mint(
    to: string,
    minTokensMinted: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    to: string,
    minTokensMinted: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintWithBaseToken(
    to: string,
    fyTokenToBuy: BigNumberish,
    minTokensMinted: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintWithBaseToken(address,uint256,uint256)"(
    to: string,
    fyTokenToBuy: BigNumberish,
    minTokensMinted: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  permit(
    owner: string,
    spender: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveBaseToken(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "retrieveBaseToken(address)"(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveFYToken(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "retrieveFYToken(address)"(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellBaseToken(
    to: string,
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sellBaseToken(address,uint128)"(
    to: string,
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellBaseTokenPreview(
    baseTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "sellBaseTokenPreview(uint128)"(
    baseTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sellFYToken(
    to: string,
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sellFYToken(address,uint128)"(
    to: string,
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellFYTokenPreview(
    fyTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "sellFYTokenPreview(uint128)"(
    fyTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setParameter(
    parameter: BytesLike,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setParameter(bytes32,int128)"(
    parameter: BytesLike,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  sync(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sync()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    src: string,
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    src: string,
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  "version()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(guy: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      guy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    "baseToken()"(overrides?: CallOverrides): Promise<string>;

    burn(
      to: string,
      minBaseTokenOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "burn(address,uint256,uint256)"(
      to: string,
      minBaseTokenOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    burnForBaseToken(
      to: string,
      minBaseTokenOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "burnForBaseToken(address,uint256,uint256)"(
      to: string,
      minBaseTokenOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    buyBaseToken(
      to: string,
      tokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyBaseToken(address,uint128,uint128)"(
      to: string,
      tokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyBaseTokenPreview(
      tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyBaseTokenPreview(uint128)"(
      tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyFYToken(address,uint128,uint128)"(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFYTokenPreview(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyFYTokenPreview(uint128)"(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeReserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "cumulativeReserveRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    fyToken(overrides?: CallOverrides): Promise<string>;

    "fyToken()"(overrides?: CallOverrides): Promise<string>;

    getBaseTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFYTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getFYTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    getG1(overrides?: CallOverrides): Promise<BigNumber>;

    "getG1()"(overrides?: CallOverrides): Promise<BigNumber>;

    getG2(overrides?: CallOverrides): Promise<BigNumber>;

    "getG2()"(overrides?: CallOverrides): Promise<BigNumber>;

    getK(overrides?: CallOverrides): Promise<BigNumber>;

    "getK()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStoredReserves(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>;

    "getStoredReserves()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>;

    maturity(overrides?: CallOverrides): Promise<number>;

    "maturity()"(overrides?: CallOverrides): Promise<number>;

    mint(
      to: string,
      minTokensMinted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "mint(address,uint256)"(
      to: string,
      minTokensMinted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    mintWithBaseToken(
      to: string,
      fyTokenToBuy: BigNumberish,
      minTokensMinted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "mintWithBaseToken(address,uint256,uint256)"(
      to: string,
      fyTokenToBuy: BigNumberish,
      minTokensMinted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    retrieveBaseToken(
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "retrieveBaseToken(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retrieveFYToken(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    "retrieveFYToken(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellBaseToken(
      to: string,
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellBaseToken(address,uint128)"(
      to: string,
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellBaseTokenPreview(
      baseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellBaseTokenPreview(uint128)"(
      baseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellFYToken(
      to: string,
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellFYToken(address,uint128)"(
      to: string,
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellFYTokenPreview(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellFYTokenPreview(uint128)"(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setParameter(
      parameter: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setParameter(bytes32,int128)"(
      parameter: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    sync(overrides?: CallOverrides): Promise<void>;

    "sync()"(overrides?: CallOverrides): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    "version()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Liquidity(
      maturity: null,
      from: string | null,
      to: string | null,
      baseTokens: null,
      fyTokenTokens: null,
      poolTokens: null
    ): TypedEventFilter<
      [number, string, string, BigNumber, BigNumber, BigNumber],
      {
        maturity: number;
        from: string;
        to: string;
        baseTokens: BigNumber;
        fyTokenTokens: BigNumber;
        poolTokens: BigNumber;
      }
    >;

    OwnershipTransferred(
      oldOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    ParameterSet(
      parameter: null,
      k: null
    ): TypedEventFilter<
      [string, BigNumber],
      { parameter: string; k: BigNumber }
    >;

    Sync(
      baseTokenReserve: null,
      storedFYTokenReserve: null,
      cumulativeReserveRatio: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        baseTokenReserve: BigNumber;
        storedFYTokenReserve: BigNumber;
        cumulativeReserveRatio: BigNumber;
      }
    >;

    Trade(
      maturity: null,
      from: string | null,
      to: string | null,
      baseTokens: null,
      fyTokenTokens: null
    ): TypedEventFilter<
      [number, string, string, BigNumber, BigNumber],
      {
        maturity: number;
        from: string;
        to: string;
        baseTokens: BigNumber;
        fyTokenTokens: BigNumber;
      }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(guy: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      guy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    "baseToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      to: string,
      minBaseTokenOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burn(address,uint256,uint256)"(
      to: string,
      minBaseTokenOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnForBaseToken(
      to: string,
      minBaseTokenOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burnForBaseToken(address,uint256,uint256)"(
      to: string,
      minBaseTokenOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyBaseToken(
      to: string,
      tokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buyBaseToken(address,uint128,uint128)"(
      to: string,
      tokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyBaseTokenPreview(
      tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyBaseTokenPreview(uint128)"(
      tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buyFYToken(address,uint128,uint128)"(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyFYTokenPreview(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyFYTokenPreview(uint128)"(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeReserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "cumulativeReserveRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    fyToken(overrides?: CallOverrides): Promise<BigNumber>;

    "fyToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFYTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getFYTokenReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    getG1(overrides?: CallOverrides): Promise<BigNumber>;

    "getG1()"(overrides?: CallOverrides): Promise<BigNumber>;

    getG2(overrides?: CallOverrides): Promise<BigNumber>;

    "getG2()"(overrides?: CallOverrides): Promise<BigNumber>;

    getK(overrides?: CallOverrides): Promise<BigNumber>;

    "getK()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStoredReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getStoredReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<BigNumber>;

    "maturity()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      to: string,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintWithBaseToken(
      to: string,
      fyTokenToBuy: BigNumberish,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintWithBaseToken(address,uint256,uint256)"(
      to: string,
      fyTokenToBuy: BigNumberish,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveBaseToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "retrieveBaseToken(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveFYToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "retrieveFYToken(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellBaseToken(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sellBaseToken(address,uint128)"(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellBaseTokenPreview(
      baseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellBaseTokenPreview(uint128)"(
      baseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellFYToken(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sellFYToken(address,uint128)"(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellFYTokenPreview(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellFYTokenPreview(uint128)"(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setParameter(
      parameter: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setParameter(bytes32,int128)"(
      parameter: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERMIT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      guy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      guy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      to: string,
      minBaseTokenOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burn(address,uint256,uint256)"(
      to: string,
      minBaseTokenOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnForBaseToken(
      to: string,
      minBaseTokenOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burnForBaseToken(address,uint256,uint256)"(
      to: string,
      minBaseTokenOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyBaseToken(
      to: string,
      tokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buyBaseToken(address,uint128,uint128)"(
      to: string,
      tokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyBaseTokenPreview(
      tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "buyBaseTokenPreview(uint128)"(
      tokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buyFYToken(address,uint128,uint128)"(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyFYTokenPreview(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "buyFYTokenPreview(uint128)"(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeReserveRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cumulativeReserveRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fyToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBaseTokenReserves(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBaseTokenReserves()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFYTokenReserves(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFYTokenReserves()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getG1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getG1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getG2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getG2()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getK()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStoredReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getStoredReserves()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maturity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maturity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to: string,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      to: string,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintWithBaseToken(
      to: string,
      fyTokenToBuy: BigNumberish,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintWithBaseToken(address,uint256,uint256)"(
      to: string,
      fyTokenToBuy: BigNumberish,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveBaseToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "retrieveBaseToken(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveFYToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "retrieveFYToken(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellBaseToken(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sellBaseToken(address,uint128)"(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellBaseTokenPreview(
      baseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sellBaseTokenPreview(uint128)"(
      baseTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellFYToken(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sellFYToken(address,uint128)"(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellFYTokenPreview(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sellFYTokenPreview(uint128)"(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setParameter(
      parameter: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setParameter(bytes32,int128)"(
      parameter: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
